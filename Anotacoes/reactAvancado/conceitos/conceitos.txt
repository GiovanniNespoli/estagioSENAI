Criar pasta STYLES para outras cofigurações de estilos como Dark e light mode ou até mesmo THEMES

<> </> == encapsular o component

Estado => Toda vez em que um estado sofre uma alteração um componente que esta
recebendo a informação atualiza

LEI DO REACT 😎😎😎

por conta de toda vez q o estado sofre uma ação ele é renderizado novamente,
quando chamamos uma função que está renderizando o nosso cod por exemplo :

const Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {

acaba que está outra função criada é renderizada novamente toda vez em que o
estado sofre uma alteração e quardando a alteração na memória fazendo com que
a nossa aplicação fique mais lenta.

então usamos a função useCallBack(), [x] => só vai recriar a função quando a
variavel x tiver uma alteração 

Hooks : Hooks são funções que permitem a você “ligar-se” aos recursos de state 
e ciclo de vida do React a partir de componentes funcionais. 
Hooks não funcionam dentro de classes — eles permitem que você use React sem classes

ciclo de vida: Conceito. Os ciclos de vida têm o objetivo de destruir componentes 
que não estão sendo utilizados. Dessa forma, podemos garantir que os recursos serão alocados 
somente nos componentes em uso. Por essa razão, cada componente possui um ciclo de vida, 
que vai da fase de montagem até a fase de desmontagem (destruição)